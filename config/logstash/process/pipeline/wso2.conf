input {
  rabbitmq{  
    user => 'logstash'
    password => 'super_secret'
    durable => true
    exchange => 'wso2_exchange'
    host => 'rabbitmq'
    key => 'wso2'
    port => 5672
    ssl => false
    queue => 'logstash'
    vhost => 'logstash'
  }
}

filter {
    grok {
        match => [ "message", "TID:%{SPACE}\[%{INT}\]%{SPACE}\[\]%{SPACE}\[%{TIMESTAMP_ISO8601:timestamp}\]%{SPACE}%{LOGLEVEL:level}%{SPACE}{%{JAVACLASS}}%{SPACE}-%{SPACE}destino%{SPACE}=%{SPACE}(?<sentido>>>>>>>>>>>|<<<<<<<<<<) %{GREEDYDATA:servicio_event}, MessageID = %{GREEDYDATA:message_id}, CORRELATION_ID = %{GREEDYDATA:correlation_id}, cuerpo = (?<cuerpo_event>(.|\r|\n)*)%{SPACE}{%{JAVACLASS}}" ]

    }

    if "_grokparsefailure" in [tags] {
       drop { }
    }
    
    if [sentido] == ">>>>>>>>>>" {
      aggregate {
	task_id => "%{correlation_id}"
	code => "
          map['servicio'] ||= '' ; map['servicio'] = event.get('servicio_event')
	  map['in_message_id'] ||= '' ; map['in_message_id'] = event.get('message_id')
	  map['in_message'] ||= '' ; map['in_message'] = event.get('cuerpo_event')
	  map['in_timestamp'] ||= '' ; map['in_timestamp'] = event.get('timestamp')
        "
	map_action => "create_or_update"
	
      }
      drop {}
    }

   if [sentido] == "<<<<<<<<<<" {
      aggregate {
        task_id => "%{correlation_id}"
        code => "
	  event.set('servicio', map['servicio'])
          event.set('in_message_id', map['in_message_id'])
          event.set('in_message', map['in_message'])
          event.set('in_timestamp', map['in_timestamp'])
        "
	map_action => "update"
	end_of_task => true
	timeout => 120
        
        add_field => {
          "out_message" => "%{cuerpo_event}"
          "out_message_id" => "%{message_id}"
          "out_timestamp" => "%{timestamp}"

        }
        remove_field => [
          "message","sentido","servicio_event","message_id","cuerpo_event"
        ]

      }
      
      ruby {
          init => "require 'time'"
          code => "
	    in_serv =  Time.parse(event.get('in_timestamp').to_s).to_f;
            out_serv =  Time.parse(event.get('out_timestamp').to_s).to_f;
            event.set('response_time', out_serv - in_serv);
        "
      add_tag => [ "response_time" ]
      }	
      
      date {
            match => ["in_timestamp", "YYYY-MM-dd HH:mm:ss.SSS", "ISO8601"]
            timezone => "Europe/Madrid"
            target => "@timestamp"
      }
      
    }


   
}

output {
  elasticsearch {
    hosts    => [ 'elasticsearch' ]
    index => "wso2-%{+YYYY.MM.dd}"
    document_type => "wso2-services-log"

  }
}
